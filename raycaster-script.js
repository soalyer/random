let canvas2d = document.getElementById("2d-canvas");
let ctx2d = canvas2d.getContext('2d');

let canvas3d = document.getElementById("3d-canvas");
let ctx3d = canvas3d.getContext('2d');

let bg2d = "#5ea658";
let bg3d = "#6f99ab";
let wallcolor2d = ["#a12d48","#363052"];
let wallcolor3d = ["#d9584a","#a12d48","#565978","#363052","#5ea658","#508f4f"];

/* https://stackoverflow.com/a/57401891 */
function adjust(color, amount) {
    return '#' + color.replace(/^#/, '').replace(/../g, color => ('0'+Math.min(255, Math.max(0, parseInt(color, 16) + amount)).toString(16)).substr(-2));
}

let wallcolor3ddark = []
for (let i = 0; i < wallcolor3d.length; i++) {
    wallcolor3ddark.push(adjust(wallcolor3d[i], -20));
}

let resolution = 128;

let slider = document.getElementById("slider");
let slidecaption = document.getElementById("slidecaption");

slider.oninput = function() {
    slidecaption.innerHTML = "Resolution: " + 2 ** this.value;
    resolution = 2 ** this.value;
}

ctx2d.fillStyle = bg2d;
ctx2d.fillRect(0,0,512, 512);

ctx3d.fillStyle = bg3d;
ctx3d.fillRect(0,0,512, 512);

//////////

let px, py, pa;
let dr = 0, drn = 0, da = 0, dan = 0;
px = 96, py = 96, pa = 0;

let mapX = 8, mapY = 8, mapS = 64;
let map = [
    1, 1, 1, 1, 1, 1, 1, 1,
    1, 0, 0, 0, 0, 0, 0, 1,
    1, 0, 0, 0, 0, 2, 0, 1,
    1, 0, 1, 0, 0, 2, 0, 1,
    1, 0, 0, 0, 0, 0, 0, 1,
    1, 0, 0, 2, 0, 1, 0, 1,
    1, 0, 0, 0, 0, 0, 0, 1,
    1, 1, 1, 1, 1, 1, 1, 1,
]

let textures = [
    // brick
    0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,
    1,1,1,1,1,1,1,0, 0,1,1,1,1,1,1,1, 1,1,1,1,1,1,1,0, 0,1,1,1,1,1,1,1,
    1,1,1,1,1,1,1,0, 0,1,1,1,1,1,1,1, 1,1,1,1,1,1,1,0, 0,1,1,1,1,1,1,1,
    1,1,1,1,1,1,1,0, 0,1,1,1,1,1,1,1, 1,1,1,1,1,1,1,0, 0,1,1,1,1,1,1,1,
    1,1,1,1,1,1,1,0, 0,1,1,1,1,1,1,1, 1,1,1,1,1,1,1,0, 0,1,1,1,1,1,1,1,
    1,1,1,1,1,1,1,0, 0,1,1,1,1,1,1,1, 1,1,1,1,1,1,1,0, 0,1,1,1,1,1,1,1,
    1,1,1,1,1,1,1,0, 0,1,1,1,1,1,1,1, 1,1,1,1,1,1,1,0, 0,1,1,1,1,1,1,1,
    0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,

    0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,
    0,1,1,1,1,1,1,1, 1,1,1,1,1,1,1,0, 0,1,1,1,1,1,1,1, 1,1,1,1,1,1,1,0,
    0,1,1,1,1,1,1,1, 1,1,1,1,1,1,1,0, 0,1,1,1,1,1,1,1, 1,1,1,1,1,1,1,0,
    0,1,1,1,1,1,1,1, 1,1,1,1,1,1,1,0, 0,1,1,1,1,1,1,1, 1,1,1,1,1,1,1,0,
    0,1,1,1,1,1,1,1, 1,1,1,1,1,1,1,0, 0,1,1,1,1,1,1,1, 1,1,1,1,1,1,1,0,
    0,1,1,1,1,1,1,1, 1,1,1,1,1,1,1,0, 0,1,1,1,1,1,1,1, 1,1,1,1,1,1,1,0,
    0,1,1,1,1,1,1,1, 1,1,1,1,1,1,1,0, 0,1,1,1,1,1,1,1, 1,1,1,1,1,1,1,0,
    0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,

    0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,
    1,1,1,1,1,1,1,0, 0,1,1,1,1,1,1,1, 1,1,1,1,1,1,1,0, 0,1,1,1,1,1,1,1,
    1,1,1,1,1,1,1,0, 0,1,1,1,1,1,1,1, 1,1,1,1,1,1,1,0, 0,1,1,1,1,1,1,1,
    1,1,1,1,1,1,1,0, 0,1,1,1,1,1,1,1, 1,1,1,1,1,1,1,0, 0,1,1,1,1,1,1,1,
    1,1,1,1,1,1,1,0, 0,1,1,1,1,1,1,1, 1,1,1,1,1,1,1,0, 0,1,1,1,1,1,1,1,
    1,1,1,1,1,1,1,0, 0,1,1,1,1,1,1,1, 1,1,1,1,1,1,1,0, 0,1,1,1,1,1,1,1,
    1,1,1,1,1,1,1,0, 0,1,1,1,1,1,1,1, 1,1,1,1,1,1,1,0, 0,1,1,1,1,1,1,1,
    0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,

    0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,
    0,1,1,1,1,1,1,1, 1,1,1,1,1,1,1,0, 0,1,1,1,1,1,1,1, 1,1,1,1,1,1,1,0,
    0,1,1,1,1,1,1,1, 1,1,1,1,1,1,1,0, 0,1,1,1,1,1,1,1, 1,1,1,1,1,1,1,0,
    0,1,1,1,1,1,1,1, 1,1,1,1,1,1,1,0, 0,1,1,1,1,1,1,1, 1,1,1,1,1,1,1,0,
    0,1,1,1,1,1,1,1, 1,1,1,1,1,1,1,0, 0,1,1,1,1,1,1,1, 1,1,1,1,1,1,1,0,
    0,1,1,1,1,1,1,1, 1,1,1,1,1,1,1,0, 0,1,1,1,1,1,1,1, 1,1,1,1,1,1,1,0,
    0,1,1,1,1,1,1,1, 1,1,1,1,1,1,1,0, 0,1,1,1,1,1,1,1, 1,1,1,1,1,1,1,0,
    0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,



    2,2,2,2,3,3,3,3, 2,2,2,2,3,3,3,3, 2,2,2,2,3,3,3,3, 2,2,2,2,3,3,3,3,
    2,2,2,2,3,3,3,3, 2,2,2,2,3,3,3,3, 2,2,2,2,3,3,3,3, 2,2,2,2,3,3,3,3,
    2,2,2,2,3,3,3,3, 2,2,2,2,3,3,3,3, 2,2,2,2,3,3,3,3, 2,2,2,2,3,3,3,3,
    2,2,2,2,3,3,3,3, 2,2,2,2,3,3,3,3, 2,2,2,2,3,3,3,3, 2,2,2,2,3,3,3,3,
    2,2,2,2,3,3,3,3, 2,2,2,2,3,3,3,3, 2,2,2,2,3,3,3,3, 2,2,2,2,3,3,3,3,
    2,2,2,2,3,3,3,3, 2,2,2,2,3,3,3,3, 2,2,2,2,3,3,3,3, 2,2,2,2,3,3,3,3,
    2,2,2,2,3,3,3,3, 2,2,2,2,3,3,3,3, 2,2,2,2,3,3,3,3, 2,2,2,2,3,3,3,3,
    2,2,2,2,3,3,3,3, 2,2,2,2,3,3,3,3, 2,2,2,2,3,3,3,3, 2,2,2,2,3,3,3,3, 

    2,2,2,2,3,3,3,3, 2,2,2,2,3,3,3,3, 2,2,2,2,3,3,3,3, 2,2,2,2,3,3,3,3,
    2,2,2,2,3,3,3,3, 2,2,2,2,3,3,3,3, 2,2,2,2,3,3,3,3, 2,2,2,2,3,3,3,3,
    2,2,2,2,3,3,3,3, 2,2,2,2,3,3,3,3, 2,2,2,2,3,3,3,3, 2,2,2,2,3,3,3,3,
    2,2,2,2,3,3,3,3, 2,2,2,2,3,3,3,3, 2,2,2,2,3,3,3,3, 2,2,2,2,3,3,3,3,
    2,2,2,2,3,3,3,3, 2,2,2,2,3,3,3,3, 2,2,2,2,3,3,3,3, 2,2,2,2,3,3,3,3,
    2,2,2,2,3,3,3,3, 2,2,2,2,3,3,3,3, 2,2,2,2,3,3,3,3, 2,2,2,2,3,3,3,3,
    2,2,2,2,3,3,3,3, 2,2,2,2,3,3,3,3, 2,2,2,2,3,3,3,3, 2,2,2,2,3,3,3,3,
    2,2,2,2,3,3,3,3, 2,2,2,2,3,3,3,3, 2,2,2,2,3,3,3,3, 2,2,2,2,3,3,3,3, 
    
    2,2,2,2,3,3,3,3, 2,2,2,2,3,3,3,3, 2,2,2,2,3,3,3,3, 2,2,2,2,3,3,3,3,
    2,2,2,2,3,3,3,3, 2,2,2,2,3,3,3,3, 2,2,2,2,3,3,3,3, 2,2,2,2,3,3,3,3,
    2,2,2,2,3,3,3,3, 2,2,2,2,3,3,3,3, 2,2,2,2,3,3,3,3, 2,2,2,2,3,3,3,3,
    2,2,2,2,3,3,3,3, 2,2,2,2,3,3,3,3, 2,2,2,2,3,3,3,3, 2,2,2,2,3,3,3,3,
    2,2,2,2,3,3,3,3, 2,2,2,2,3,3,3,3, 2,2,2,2,3,3,3,3, 2,2,2,2,3,3,3,3,
    2,2,2,2,3,3,3,3, 2,2,2,2,3,3,3,3, 2,2,2,2,3,3,3,3, 2,2,2,2,3,3,3,3,
    2,2,2,2,3,3,3,3, 2,2,2,2,3,3,3,3, 2,2,2,2,3,3,3,3, 2,2,2,2,3,3,3,3,
    2,2,2,2,3,3,3,3, 2,2,2,2,3,3,3,3, 2,2,2,2,3,3,3,3, 2,2,2,2,3,3,3,3, 
    
    2,2,2,2,3,3,3,3, 2,2,2,2,3,3,3,3, 2,2,2,2,3,3,3,3, 2,2,2,2,3,3,3,3,
    2,2,2,2,3,3,3,3, 2,2,2,2,3,3,3,3, 2,2,2,2,3,3,3,3, 2,2,2,2,3,3,3,3,
    2,2,2,2,3,3,3,3, 2,2,2,2,3,3,3,3, 2,2,2,2,3,3,3,3, 2,2,2,2,3,3,3,3,
    2,2,2,2,3,3,3,3, 2,2,2,2,3,3,3,3, 2,2,2,2,3,3,3,3, 2,2,2,2,3,3,3,3,
    2,2,2,2,3,3,3,3, 2,2,2,2,3,3,3,3, 2,2,2,2,3,3,3,3, 2,2,2,2,3,3,3,3,
    2,2,2,2,3,3,3,3, 2,2,2,2,3,3,3,3, 2,2,2,2,3,3,3,3, 2,2,2,2,3,3,3,3,
    2,2,2,2,3,3,3,3, 2,2,2,2,3,3,3,3, 2,2,2,2,3,3,3,3, 2,2,2,2,3,3,3,3,
    2,2,2,2,3,3,3,3, 2,2,2,2,3,3,3,3, 2,2,2,2,3,3,3,3, 2,2,2,2,3,3,3,3, 



    4,4,4,4,4,4,4,4, 5,5,5,5,5,5,5,5, 4,4,4,4,4,4,4,4, 5,5,5,5,5,5,5,5, 
    4,4,4,4,4,4,4,4, 5,5,5,5,5,5,5,5, 4,4,4,4,4,4,4,4, 5,5,5,5,5,5,5,5, 
    4,4,4,4,4,4,4,4, 5,5,5,5,5,5,5,5, 4,4,4,4,4,4,4,4, 5,5,5,5,5,5,5,5, 
    4,4,4,4,4,4,4,4, 5,5,5,5,5,5,5,5, 4,4,4,4,4,4,4,4, 5,5,5,5,5,5,5,5, 
    4,4,4,4,4,4,4,4, 5,5,5,5,5,5,5,5, 4,4,4,4,4,4,4,4, 5,5,5,5,5,5,5,5, 
    4,4,4,4,4,4,4,4, 5,5,5,5,5,5,5,5, 4,4,4,4,4,4,4,4, 5,5,5,5,5,5,5,5, 
    4,4,4,4,4,4,4,4, 5,5,5,5,5,5,5,5, 4,4,4,4,4,4,4,4, 5,5,5,5,5,5,5,5, 
    4,4,4,4,4,4,4,4, 5,5,5,5,5,5,5,5, 4,4,4,4,4,4,4,4, 5,5,5,5,5,5,5,5, 
    
    5,5,5,5,5,5,5,5, 4,4,4,4,4,4,4,4, 5,5,5,5,5,5,5,5, 4,4,4,4,4,4,4,4, 
    5,5,5,5,5,5,5,5, 4,4,4,4,4,4,4,4, 5,5,5,5,5,5,5,5, 4,4,4,4,4,4,4,4, 
    5,5,5,5,5,5,5,5, 4,4,4,4,4,4,4,4, 5,5,5,5,5,5,5,5, 4,4,4,4,4,4,4,4, 
    5,5,5,5,5,5,5,5, 4,4,4,4,4,4,4,4, 5,5,5,5,5,5,5,5, 4,4,4,4,4,4,4,4, 
    5,5,5,5,5,5,5,5, 4,4,4,4,4,4,4,4, 5,5,5,5,5,5,5,5, 4,4,4,4,4,4,4,4, 
    5,5,5,5,5,5,5,5, 4,4,4,4,4,4,4,4, 5,5,5,5,5,5,5,5, 4,4,4,4,4,4,4,4, 
    5,5,5,5,5,5,5,5, 4,4,4,4,4,4,4,4, 5,5,5,5,5,5,5,5, 4,4,4,4,4,4,4,4, 
    5,5,5,5,5,5,5,5, 4,4,4,4,4,4,4,4, 5,5,5,5,5,5,5,5, 4,4,4,4,4,4,4,4, 

    4,4,4,4,4,4,4,4, 5,5,5,5,5,5,5,5, 4,4,4,4,4,4,4,4, 5,5,5,5,5,5,5,5, 
    4,4,4,4,4,4,4,4, 5,5,5,5,5,5,5,5, 4,4,4,4,4,4,4,4, 5,5,5,5,5,5,5,5, 
    4,4,4,4,4,4,4,4, 5,5,5,5,5,5,5,5, 4,4,4,4,4,4,4,4, 5,5,5,5,5,5,5,5, 
    4,4,4,4,4,4,4,4, 5,5,5,5,5,5,5,5, 4,4,4,4,4,4,4,4, 5,5,5,5,5,5,5,5, 
    4,4,4,4,4,4,4,4, 5,5,5,5,5,5,5,5, 4,4,4,4,4,4,4,4, 5,5,5,5,5,5,5,5, 
    4,4,4,4,4,4,4,4, 5,5,5,5,5,5,5,5, 4,4,4,4,4,4,4,4, 5,5,5,5,5,5,5,5, 
    4,4,4,4,4,4,4,4, 5,5,5,5,5,5,5,5, 4,4,4,4,4,4,4,4, 5,5,5,5,5,5,5,5, 
    4,4,4,4,4,4,4,4, 5,5,5,5,5,5,5,5, 4,4,4,4,4,4,4,4, 5,5,5,5,5,5,5,5, 

    5,5,5,5,5,5,5,5, 4,4,4,4,4,4,4,4, 5,5,5,5,5,5,5,5, 4,4,4,4,4,4,4,4, 
    5,5,5,5,5,5,5,5, 4,4,4,4,4,4,4,4, 5,5,5,5,5,5,5,5, 4,4,4,4,4,4,4,4, 
    5,5,5,5,5,5,5,5, 4,4,4,4,4,4,4,4, 5,5,5,5,5,5,5,5, 4,4,4,4,4,4,4,4, 
    5,5,5,5,5,5,5,5, 4,4,4,4,4,4,4,4, 5,5,5,5,5,5,5,5, 4,4,4,4,4,4,4,4, 
    5,5,5,5,5,5,5,5, 4,4,4,4,4,4,4,4, 5,5,5,5,5,5,5,5, 4,4,4,4,4,4,4,4, 
    5,5,5,5,5,5,5,5, 4,4,4,4,4,4,4,4, 5,5,5,5,5,5,5,5, 4,4,4,4,4,4,4,4, 
    5,5,5,5,5,5,5,5, 4,4,4,4,4,4,4,4, 5,5,5,5,5,5,5,5, 4,4,4,4,4,4,4,4, 
    5,5,5,5,5,5,5,5, 4,4,4,4,4,4,4,4, 5,5,5,5,5,5,5,5, 4,4,4,4,4,4,4,4, 
];
function drawPlayer() {
    ctx2d.fillStyle = "#222222";
    ctx2d.fillRect(px-4,py-4,8, 8);
    
}

function display() {
    ctx2d.fillStyle = bg2d;
    ctx2d.fillRect(0,0,512, 512);
    ctx3d.fillStyle = bg3d;
    ctx3d.fillRect(0,0,512, 512);
    drawMap2d();
    drawPlayer();
    drawRays3d();
}

let fps = 60;
function update() {
    setTimeout(() => {
        requestAnimationFrame(update);
      }, 1000 / fps);

    // calculate  movemnet
    pa += (dan + da) * (30 / fps);
    if (pa < 0) { pa += 2*Math.PI; }
    if (pa > 2*Math.PI) { pa -= 2*Math.PI; }
    let pdx, pdy;
    pdx = Math.cos(pa) * (dr + drn) * (30 / fps);
    pdy = Math.sin(pa) * (dr + drn) * (30 / fps);
    
    let xo, yo;
    xo = (pdx < 0) ? -8 : 8;
    yo = (pdy < 0) ? -8 : 8;
    // collision detection 
    let ipx = Math.floor(px / 64);
    let ipx_add_xo = Math.floor((px+xo) / 64);
    let ipy = Math.floor(py / 64);
    let ipy_add_yo = Math.floor((py+yo) / 64);

    if (dr + drn != 0) {
        if (map[ipy * mapX + ipx_add_xo] == 0) {
            px += pdx;
        } 
        if (map[ipy_add_yo * mapX + ipx] == 0) {
            py += pdy;
        }
    }
    display();
}

update();


function drawMap2d() {
    for (let y = 0; y < mapY; y++) {
        for (let x = 0; x < mapX; x++) {
            if (map[y*mapX+x] > 0) {
                ctx2d.fillStyle = wallcolor2d[map[y*mapX+x]-1];
                ctx2d.fillRect(x*64,y*64,64,64);
            }
        }
    }
}



function drawRays3d() {
    let r, rx, ry,ra, mx, my, mp, xo, yo, dof, disT;
    let dr = Math.PI / 180;
    dr *= (32 / resolution);
    ra = pa - dr * resolution;
    
    // ray loop
    for (r = 0; r < resolution * 2; r++) {
        let vmt = 0, hmt = 0;

        if (ra < 0) { ra += 2 * Math.PI; }
        if (ra > 2 * Math.PI) { ra -= 2 * Math.PI; }
        dof = 0;

        // vertical wall detection 
        let aTan = -1/Math.tan(ra);
        let disH = 9007199254740991, hx = px, hy = py;
        if (ra > Math.PI) {
            ry = Math.floor(py / 64) * 64 - 0.0001;
            rx = (py - ry) * aTan + px;
            yo = -64; xo = -yo * aTan;
        }
        if (ra < Math.PI) {
            ry = Math.floor(py / 64) * 64 + 64;
            rx = (py - ry) * aTan + px;
            yo = 64; xo = -yo * aTan;
        }
        if (ra == 0 || ra == Math.PI) {rx = px; ry = py; dof = 8;}
        while (dof < 8) {
            mx = Math.floor(rx / 64);
            my = Math.floor(ry / 64);
            mp = my * mapX + mx;
            if (mp >= 0 && mp < mapX * mapY && map[mp] > 0) {
                hmt = map[mp]-1;
                hx = rx;
                hy = ry;
                disH = ((hx-px)*(hx-px)+(hy-py)*(hy-py));
                dof = 8;
            }
            else {
                rx += xo;
                ry += yo;
                dof++;
            }
        }
        dof = 0;

        // horizontal wall detetion
        let nTan = -Math.tan(ra);
        let disV = 9007199254740991, vx = px, vy = py;
        if (ra > Math.PI/ 2 || ra < 3 * Math.PI / 2) {
            rx = Math.floor(px / 64) * 64 - 0.0001;
            ry = (px - rx) * nTan + py;
            xo = -64; yo = -xo * nTan;
        }
        if (ra < Math.PI / 2 || ra > 3 * Math.PI / 2) {
            rx = Math.floor(px / 64) * 64 + 64;
            ry = (px - rx) * nTan + py;
            xo = 64; yo = -xo * nTan;
        }
        if (ra == Math.PI / 2 || ra == 3 * Math.PI / 2) {rx = px; ry = py; dof = 8;}
        while (dof < 8) {
            mx = Math.floor(rx / 64);
            my = Math.floor(ry / 64);
            mp = my * mapX + mx;
            if (mp >= 0 && mp < mapX * mapY && map[mp] > 0) {
                vmt = map[mp]-1;
                vx = rx;
                vy = ry;
                disV = ((vx-px)*(vx-px)+(vy-py)*(vy-py));
                dof = 8;
            }
            else {
                rx += xo;
                ry += yo;
                dof++;
            }
        }
        let dark;
        if (disV < disH) {
            hmt = vmt;
            dark = true;
            rx = vx; ry = vy;
            disT = disV;
        }
        else {
            dark = false;
            rx = hx; ry = hy;
            disT = disH;
        }

        // draw 2d ray
        disT = Math.sqrt(disT);
        ctx2d.beginPath();
        ctx2d.moveTo(px, py);
        ctx2d.lineTo(rx, ry);
        ctx2d.lineWidth = 1;
        ctx2d.strokeStyle = "#a7b023";
        ctx2d.stroke();

        // draw 3d 
        ra += dr;
        let ca = pa -ra;
        if (ca < 0) { ca += 2 * Math.PI; }
        if (ca > 2 * Math.PI) { ca -= 2 * Math.PI; }
        disT = disT * Math.cos(ca);
        let lineH = (mapS * 512) / disT;
        
        
        
        let ty_step = 32 / lineH;
        let ty_off = 0;
        
        if (lineH > 512) {
            
            ty_off = (lineH - 512) / 2.0;
            lineH = 512;
        }
       
        let lineO = 256 - lineH / 2;

        let ty = ty_off * ty_step + hmt*32;
        let tx;
        if (dark) {
            tx = Math.floor(ry / 2.0) % 32;
            
            if (ra > Math.PI / 2 && ra < 3 * Math.PI / 2) {
                tx = 31 - tx;
            }
        }
        else {
            tx = Math.floor(rx / 2.0) % 32;
            tx = 31 - tx;
            if (ra > Math.PI) {
                tx = 31 - tx;
            }
        }
        //wall
        let storeline = 0;
        let prevS = -1, s = -1;
        for (let y = -1; y < lineH; y++) {
            let c = textures[Math.floor(ty) * 32 + tx];
            prevS = s;
            s = dark ? wallcolor3ddark[c] : wallcolor3d[c];
            if (s != prevS) {
                ctx3d.fillRect(r * (256 / resolution), y+lineO-storeline, (256 / resolution), (256/resolution)+storeline+1);
                ctx3d.fillStyle = s;
                storeline = 0;
            }
            else if (y >= lineH - 1) {
                ctx3d.fillRect(r * (256 / resolution), y+lineO-storeline, (256 / resolution), (256/resolution)+storeline);
            }
            else {
                storeline++;
            }
            
            ty += ty_step;
        }
        //floor
        storeline = 0;
        prevS = -1, s = -1;
        for (let y = lineO+lineH; y < 512; y++) {
            let dy = y - 256;
            let raFix = Math.cos(pa-ra);
            tx = px / 2 + Math.cos(ra) * 256 * 32 / dy / raFix;
            ty = py / 2 + Math.sin(ra) * 256 * 32 / dy / raFix;

            let c = textures[((Math.floor(ty)&31)+64) * 32 + (Math.floor(tx)&31)];
            prevS = s;
            s = dark ? wallcolor3ddark[c] : wallcolor3d[c];
            if (s != prevS) {
                ctx3d.fillRect(r * (256 / resolution), y-storeline, (256 / resolution), (256/resolution)+storeline);
                ctx3d.fillStyle = s;
                storeline = 0;
            }
            else if (y >= 511) {
                ctx3d.fillRect(r * (256 / resolution), y-storeline, (256 / resolution), (256/resolution)+storeline);
            }
            else {
                storeline++;
            }
        }
        
    }
}

////////

document.onkeydown = movePress;
document.onkeyup = moveRelease;
function movePress(e) {
    var code = e.keyCode;
    switch (code) {
        case 37: 
            dan = -0.12;
            break;
        case 38:
            drn = 8;
            break;
        case 39: 
            da = 0.12;
            break;
        case 40: 
            dr = -8;
            break;
    }
}

function moveRelease(e) {
    var code = e.keyCode;
    switch (code) {
        case 37: 
            dan = 0;
            break;
        case 38:
            drn = 0;
            break;
        case 39: 
            da = 0;
            break;
        case 40: 
            dr = 0;
            break;
    }
}
